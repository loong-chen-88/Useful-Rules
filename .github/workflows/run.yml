name: Generate shadowrocket rules

on:
  workflow_dispatch:
  schedule:
    - cron: "00 00 * * *"
  push:
    branches:
      - main

jobs:
  build_rules_list:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Tiktok.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TikTok.list | sed '1,2 d' > TikTok.list

      - name: Generate icloud.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/icloud.txt | sed 's/^[^:]*:/DOMAIN-SUFFIX,/' > icloud.list

      - name: Generate apple.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/felixonmars/dnsmasq-china-list/master/apple.china.conf | sed 's/^server=\/\(.*\)\/114\.114\.114\.114$/DOMAIN-SUFFIX,\1/' > apple.list

      - name: Generate tld-not-cn.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/tld-!cn.txt | sed 's/^[^:]*:/DOMAIN-SET,./' > tld-not-cn.list

      - name: Generate private.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/domain-list-custom/release/private.txt | sed 's/^[^:]*:/DOMAIN-SUFFIX,/' > private.list

      - name: Generate reject.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/reject-list.txt | sed 's/^/DOMAIN-SUFFIX,/' > reject.list

      - name: Generate proxyt.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/proxy-list.txt | sed 's/^/DOMAIN-SUFFIX,/' > proxy.list

      - name: Generate direct.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/direct-list.txt | sed 's/^/DOMAIN-SUFFIX,/' > direct.list

      - name: Generate gfw.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/release/gfw.txt | sed 's/^/DOMAIN-SUFFIX,/' > gfw.list

      - name: Generate cncidr.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/cn.txt | sed 's/^/IP-CIDR,/' > cncidr.list

      - name: Generate lancidr.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/private.txt | sed 's/^/IP-CIDR,/' > lancidr.list

      - name: Generate telegramcidr.txt file
        run: |
          curl -sSL https://raw.githubusercontent.com/Loyalsoldier/geoip/release/text/telegram.txt | sed 's/^/IP-CIDR,/' > telegramcidr.list

      - name: Move files to rules directory
        run: |
          mkdir -p rules.d
          cp *.list ./rules.d/

      # - name: Configure artifact name
      #   run: |
      #     echo "ARTIFACT_NAME=Built on $(TZ="Asia/Shanghai" date +%Y%m%d)" >> $GITHUB_ENV

      - name: Upload rule list artifact
        uses: actions/upload-artifact@v3
        with:
          name: rules
          path: ./rules.d/
          # retention-days: 1
          # if-no-files-found: error

  build_whitelist_mode_conf_file:
    runs-on: ubuntu-latest
    needs: build_rules_list
    steps:
      - name: Creating Folders
        run: |
          mkdir -p {rules,rules.d,conf.d}
          
      - name: Get common configuration files
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: 'Custom'
          token: ${{ secrets.ACCESS_TOKEN }}
          sparse-checkout: |
            General.txt
          sparse-checkout-cone-mode: false
          path: conf.d

      - name: Download rule list artifact
        uses: actions/download-artifact@v3
        with:
          name: rules
          path: ./rules

      - name: Modify rule list files
        run: |
          sed -i 's/$/,PROXY/' ./rules/TikTok.list
          sed -i '1i# 解锁 TikTok' ./rules/TikTok.list
          sed -i '$a\' ./rules/TikTok.list
          cp ./rules/TikTok.list ./rules.d

          sed -i 's/$/,DIRECT/' ./rules/icloud.list
          sed -i '1i# iCloud 域名' ./rules/icloud.list
          cp ./rules/icloud.list ./rules.d

          sed -i 's/$/,DIRECT/' ./rules/apple.list
          sed -i '1i# Apple 在中国大陆可直连的域名' ./rules/apple.list
          cp ./rules/apple.list ./rules.d

          sed -i 's/$/,DIRECT/' ./rules/private.list
          sed -i '1i# 私有网络专用域名' ./rules/private.list
          cp ./rules/private.list ./rules.d

          sed -i 's/$/,REJECT/' ./rules/reject.list
          sed -i '1i# 广告域名' ./rules/reject.list
          cp ./rules/reject.list ./rules.d

          sed -i 's/$/,PROXY/' ./rules/proxy.list
          sed -i '1i# 代理域名' ./rules/proxy.list
          cp ./rules/proxy.list ./rules.d

          sed -i 's/$/,DIRECT/' ./rules/direct.list
          sed -i '1i# 直连域名列表' ./rules/direct.list
          cp ./rules/direct.list ./rules.d

          sed -i 's/$/,DIRECT,no-resolve/' ./rules/cncidr.list
          sed -i '1i# 中国大陆 IP 地址' ./rules/cncidr.list
          cp ./rules/cncidr.list ./rules.d

          sed -i 's/$/,DIRECT,no-resolve/' ./rules/lancidr.list
          sed -i '1i# 局域网及预留 IP 地址' ./rules/lancidr.list
          cp ./rules/lancidr.list ./rules.d

          sed -i 's/$/,PROXY,no-resolve/' ./rules/telegramcidr.list
          sed -i '1i# Telegram 使用的 IP 地址' ./rules/telegramcidr.list
          cp ./rules/telegramcidr.list ./rules.d

      - name: Concatenate rule configuration files
        run: |
          cat ./rules.d/*.list > ./conf.d/rules.txt
          echo -e "GEOIP,CN,DIRECT,no-resolve\nFINAL,PROXY" >> ./conf.d/rules.txt
          sed -i '1s/^/[RULE]\n/' ./conf.d/rules.txt

      - name: Generate URL rewrite configuration file
        run: |
          curl -sSL https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKTok-US.conf | sed -n '/\[URL Rewrite\]/,$p' > URL_Rewrite.txt
          sed -i '/\[MITM\]/,$d' URL_Rewrite.txt
          sed -i '/\[URL Rewrite\]/a\^https?://(www.)?g.cn https://www.google.com 302\n^https?://(www.)?google.cn https://www.google.com 302' URL_Rewrite.txt
          cp URL_Rewrite.txt ./conf.d

      - name: Generate HTTPS decrypted configuration file
        run: |
          curl -sSL https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKTok-US.conf | sed -n '/\[MITM\]/,$p' > MITM.txt
          sed -i 's/hostname = /hostname = *snssdk.com,*amemv.com,*instagram.com,/' MITM.txt
          cp MITM.txt ./conf.d

      - name: Concatenate All configuration file
        run: |
          cat ./conf.d/*.txt > ./conf.d/WhitelistMode.conf
          sed -i "1s/^/# Built on $(TZ="Asia/Shanghai" date)\n/" ./conf.d/WhitelistMode.conf

      - name: Upload whitelist mode artifact
        uses: actions/upload-artifact@v3
        with:
          name: rules
          path: ./conf.d/WhitelistMode.conf
          # retention-days: 1
          # if-no-files-found: error
   

  build_blacklist_mode_conf_file:
    runs-on: ubuntu-latest
    needs: build_rules_list
    steps:
      - name: Creating Folders
        run: |
          mkdir -p {rules,rules.d,conf.d}
          
      - name: Get common configuration files
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: 'Custom'
          token: ${{ secrets.ACCESS_TOKEN }}
          sparse-checkout: |
            General.txt
          sparse-checkout-cone-mode: false
          path: conf.d

      - name: Download rule list artifact
        uses: actions/download-artifact@v3
        with:
          name: rules
          path: ./rules

      - name: Modify rule list files
        run: |
          sed -i 's/$/,PROXY/' ./rules/TikTok.list
          sed -i '1i# 解锁 TikTok' ./rules/TikTok.list
          sed -i '$a\' ./rules/TikTok.list
          cp ./rules/TikTok.list ./rules.d/

          sed -i 's/$/,PROXY/' ./rules/tld-not-cn.list
          sed -i '1i# 非中国大陆使用的顶级域名' ./rules/tld-not-cn.list
          cp ./rules/tld-not-cn.list ./rules.d/

          sed -i 's/$/,DIRECT/' ./rules/private.list
          sed -i '1i# 私有网络专用域名' ./rules/private.list
          cp ./rules/private.list ./rules.d/

          sed -i 's/$/,REJECT/' ./rules/reject.list
          sed -i '1i# 广告域名' ./rules/reject.list
          cp ./rules/reject.list ./rules.d/

          sed -i 's/$/,PROXY/' ./rules/proxy.list
          sed -i '1i# 代理域名' ./rules/proxy.list
          cp ./rules/proxy.list ./rules.d/

          sed -i 's/$/,PROXY/' ./rules/gfw.list
          sed -i '1i# GFWList 域名' ./rules/gfw.list
          cp ./rules/gfw.list ./rules.d/

          sed -i 's/$/,PROXY,no-resolve/' ./rules/telegramcidr.list
          sed -i '1i# Telegram 使用的 IP 地址' ./rules/telegramcidr.list
          cp ./rules/telegramcidr.list ./rules.d/

      - name: Concatenate rule configuration files
        run: |
          cat ./rules.d/*.list > ./conf.d/rules.txt
          echo -e "GEOIP,CN,DIRECT,no-resolve\nFINAL,DIRECT" >> ./conf.d/rules.txt
          sed -i '1s/^/[RULE]\n/' ./conf.d/rules.txt

      - name: Generate URL rewrite configuration file
        run: |
          curl -sSL https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKTok-US.conf | sed -n '/\[URL Rewrite\]/,$p' > URL_Rewrite.txt
          sed -i '/\[MITM\]/,$d' URL_Rewrite.txt
          sed -i '/\[URL Rewrite\]/a\^https?://(www.)?g.cn https://www.google.com 302\n^https?://(www.)?google.cn https://www.google.com 302' URL_Rewrite.txt
          cp URL_Rewrite.txt ./conf.d/

      - name: Generate HTTPS decrypted configuration file
        run: |
          curl -sSL https://raw.githubusercontent.com/Semporia/TikTok-Unlock/master/Shadowrocket/TiKTok-US.conf | sed -n '/\[MITM\]/,$p' > MITM.txt
          sed -i 's/hostname = /hostname = *snssdk.com,*amemv.com,*instagram.com,/' MITM.txt
          cp MITM.txt ./conf.d/

      - name: Concatenate All configuration file
        run: |
          cat ./conf.d/*.txt > ./conf.d/BlacklistMode.conf
          sed -i "1s/^/# Built on $(TZ="Asia/Shanghai" date)\n/" ./conf.d/BlacklistMode.conf

      - name: Upload backlist mode artifact
        uses: actions/upload-artifact@v3
        with:
          name: rules
          path: ./conf.d/BlacklistMode.conf
          # retention-days: 1
          # if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: [build_rules_list,build_whitelist_mode_conf_file,build_blacklist_mode_conf_file]
    steps:     
      - name: Configure variable names
        run: |
          echo "RELEASE_NAME=Built on $(TZ="Asia/Shanghai" date +%Y%m%d%H%M)" >> $GITHUB_ENV
          echo "TAG_NAME=$(TZ="Asia/Shanghai" date +%Y%m%d%H%M)" >> $GITHUB_ENV
          mkdir -p rules

      - name: Download artifact 
        uses: actions/download-artifact@v3
        with:
          name: rules
          path: ./rules

      - name: Publish and upload artifacts
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          files: |
            ./rules/*
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Upload artifact to "release" branch
        run: |
          cd rules || exit 1
          git init
          git config --local user.name ${{ secrets.USER_NAME }}
          git config --local user.email ${{ secrets.USER_EMAIL }}
          git checkout -b release
          git add .
          git commit -m "${{ env.RELEASE_NAME }}"
          git remote add origin "https://${{ github.actor }}:${{ secrets.ACCESS_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin release
          # git push --delete origin $( git ls-remote --tags origin | awk '{print $2}' | grep -vE "$(echo -e ${TAG_NAME})")
          
      - name: Purge jsdelivr CDN
        run: |
          cd rules || exit 1
          for file in $(ls); do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}@release/${file}"
          done

  Delete_Historical_Data:
    runs-on: ubuntu-latest
    needs: publish
    steps:
        - name: Delete old artifacts
          uses: geekyeggo/delete-artifact@v2
          with:
            name: rules

        - name: Delete old tags and releases
          uses: dev-drprasad/delete-older-releases@v0.3.3
          with:
            keep_latest: 7
            delete_tags: true
          env:
              GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

        - name: Delete old workflow runs
          uses: Mattraks/delete-workflow-runs@v2
          with:
            token: ${{ secrets.ACCESS_TOKEN }}
            repository: ${{ github.repository }}
            retain_days: 30
            keep_minimum_runs: 6
            delete_workflow_by_state_pattern: ALL
            delete_run_by_conclusion_pattern: ALL
          
    
